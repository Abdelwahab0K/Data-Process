@{
    ViewData["Title"] = "Dashboard"; // Set the page title
    Layout = "_DashboardLayout";     // Use the custom dashboard layout
}

@section Styles {
    <style>
        :root {
            --primary-color: #0D4A7B;
            --secondary-color: #F5B02C;
            --success-color: #198754;
            --gray-color: #6c757d;
            --light-gray: #f8f9fa;
            --dark-blue: #012B51;
        }

        body {
            background-color: var(--light-gray);
        }

        .dashboard-header {
            background-color: var(--primary-color);
            color: white;
            padding: 2rem 1rem;
            border-radius: 0 0 1rem 1rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .dashboard-title {
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .dashboard-subtitle {
            opacity: 0.9;
            font-weight: 300;
        }

        /* Statistics cards */
        .stats-card {
            height: 100%;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border: none;
            padding: 1rem;
            text-align: center;
            color: white;
        }

        .stats-value {
            font-size: 1.75rem;
            font-weight: 700;
            margin-top: 0.5rem;
        }

        .card-blue {
            background-color: #007bff;
        }

        .card-green {
            background-color: #198754;
        }

        .card-cyan {
            background-color: #17a2b8;
        }

        .card-yellow {
            background-color: #ffc107;
            color: #212529;
        }

        /* Search bar container */
        .filter-bar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1.5rem;
            position: relative;
        }

        .search-container {
            position: relative;
            flex-grow: 1;
            max-width: 400px;
            margin: 0 auto;
        }

            .search-container input {
                padding: 0.75rem 1rem 0.75rem 2.5rem;
                border-radius: 2rem;
                border: 1px solid #ddd;
                box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                transition: all 0.3s ease;
                width: 100%;
            }

                .search-container input:focus {
                    border-color: var(--secondary-color);
                    box-shadow: 0 0 0 0.25rem rgba(245, 176, 44, 0.25);
                }

        .search-icon {
            position: absolute;
            left: 12px;
            top: 12px;
            color: var(--gray-color);
        }

        /* Export button */
        .export-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 2rem;
            padding: 0.75rem 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .export-btn:hover {
                background-color: var(--dark-blue);
            }

        /* Card styling */
        .data-card {
            border-radius: 1rem;
            overflow: hidden;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border: none;
        }

        .card-header {
            padding: 0.75rem 1rem;
            font-weight: bold;
            text-align: center;
            color: white;
        }

        .info-header {
            background-color: var(--primary-color);
        }

        .process-header {
            background-color: var(--gray-color);
        }

        .full-header {
            background-color: var(--success-color);
        }

        /* Table styling */
        .table {
            margin-bottom: 0;
        }

            .table thead th {
                background-color: rgba(13, 74, 123, 0.1);
                color: var(--dark-blue);
                font-weight: 600;
                text-align: center;
                vertical-align: middle;
                border-bottom: 2px solid var(--primary-color);
            }

            .table tbody td {
                vertical-align: middle;
            }

            .table tbody tr:hover {
                background-color: rgba(245, 176, 44, 0.1);
            }

        .table-info {
            background-color: rgba(13, 110, 253, 0.1) !important;
            border-left: 3px solid var(--primary-color);
        }

        /* Pagination style */
        .pagination {
            justify-content: center;
        }

            .pagination .page-link {
                color: var(--dark-blue);
                border-radius: 0.25rem;
                margin: 0 0.25rem;
            }

            .pagination .active .page-link {
                background-color: var(--primary-color);
                color: white;
                border-color: var(--primary-color);
            }

            .pagination .page-link:focus {
                box-shadow: 0 0 0 0.25rem rgba(13, 74, 123, 0.25);
            }

        /* Responsive adjustments */
        @@media (max-width: 992px) {
            .split-table-container {
                flex-direction: column;
            }

            .split-left, .split-right {
                width: 100%;
            }

            .filter-bar {
                flex-direction: column;
                gap: 1rem;
            }

            .search-container {
                max-width: 100%;
            }

            .export-btn {
                width: 100%;
                justify-content: center;
            }
        }

        /* Status indicators */
        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 5px;
        }

        .status-ok {
            background-color: #198754;
        }

        .status-warning {
            background-color: #ffc107;
        }

        .status-error {
            background-color: #dc3545;
        }

        /* Loading spinner */
        .loader {
            border: 3px solid #f3f3f3;
            border-radius: 50%;
            border-top: 3px solid var(--primary-color);
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
            display: none;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

    </style>
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="container">
        <h2 class="dashboard-title text-center">Tableau de Bord Maghreb Steel</h2>
        <p class="dashboard-subtitle text-center">Suivi de Production et Données de Process</p>
    </div>
</div>

<div class="container">
    <!-- Quick Stats Cards - Moved to TOP -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="stats-card card-blue">
                <h5>Total Bobines</h5>
                <div class="stats-value" id="totalCoils">152965</div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="stats-card card-green">
                <h5>Poids Moyen</h5>
                <div class="stats-value" id="avgWeight">15 289,40 t</div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="stats-card card-cyan">
                <h5>Passes Moyennes</h5>
                <div class="stats-value" id="avgPasses">7,7</div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="stats-card card-yellow">
                <h5>Taux d'Erreur</h5>
                <div class="stats-value" id="errorRate">10,0%</div>
            </div>
        </div>
    </div>

    <!-- Global Search Bar with Export Button -->
    <div class="filter-bar">
        <div class="search-container">
            <i class="bi bi-search search-icon"></i>
            <input type="text" id="dashboardSearch" class="form-control" placeholder="Rechercher par ID, client, grade...">
        </div>
        <button id="exportToExcel" class="export-btn" title="Exporter vers Excel">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="white" viewBox="0 0 24 24">
                <path d="M19.707 7.293l-4-4A1 1 0 0015 3H6a2 2 0 00-2 2v14a2 2 0 002 2h12a2 2 0 002-2V8a1 1 0 00-.293-.707zM16 5.414L18.586 8H16V5.414zM6 19V5h8v4a1 1 0 001 1h4v9H6zm4.707-9.707L9 10.586l-1.707-1.707-1.414 1.414L7.586 12l-1.707 1.707 1.414 1.414L9 13.414l1.707 1.707 1.414-1.414L10.414 12l1.707-1.707-1.414-1.414z" />
            </svg>
            <span style="margin-left: 0.5rem;">Exporter vers Excel</span>
        </button>

    </div>

    <!-- Data loading indicator -->
    <div class="text-center mb-3">
        <div id="loadingSpinner" class="loader"></div>
    </div>

    <!-- Side-by-side Split Tables -->
    <div class="row">
        <div class="col-lg-6">
            <div class="data-card">
                <div class="card-header info-header">
                    <i class="bi bi-info-circle me-2"></i>Informations Générales
                </div>
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="leftTable">
                        <thead>
                            <tr>
                                <th>Journée</th>
                                <th>Pce ID</th>
                                <th>Coil ID</th>
                                <th>Nmic</th>
                            </tr>
                        </thead>
                        <tbody></tbody> <!-- Filled dynamically via JavaScript -->
                    </table>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="data-card">
                <div class="card-header process-header">
                    <i class="bi bi-gear me-2"></i>Données de Process
                </div>
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="rightTable">
                        <thead>
                            <tr>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Nombre Pass</th>
                                <th>Cobble</th>
                                <th>Restart</th>
                                <th>Nature</th>
                            </tr>
                        </thead>
                        <tbody></tbody> <!-- Filled dynamically via JavaScript -->
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Full Data Table (Complete View) -->
    <div class="data-card">
        <div class="card-header full-header">
            <i class="bi bi-table me-2"></i>Vue Complète: Informations Supplémentaires
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover" id="fullTable">
                <thead>
                    <tr>
                        <th>Grade</th>
                        <th>Fournisseur Brame</th>
                        <th>Client</th>
                        <th>Poids Slab Balance Four</th>
                        <th>Poids Bobine</th>
                        <th>Tx Chutes Brute</th>
                        <th>Tx Chutes Fin</th>
                        <th>Tx Chutes Échantillon</th>
                    </tr>
                </thead>
                <tbody></tbody> <!-- Filled dynamically via JavaScript -->
            </table>
        </div>
    </div>

    <!-- Pagination Links -->
    <nav aria-label="Page navigation">
        <ul class="pagination" id="paginationContainer"></ul>
    </nav>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css"></script>
    <script>
        let currentPage = 1;
        let totalPages = 1;
        let searchQuery = "";
        let dataCache = {};
        let allData = []; // Store all data for export

        // Fetch and load data for the current page with optional search
        function loadData(page = 1, search = "") {
            // Show loading spinner
            $('#loadingSpinner').show();

            // Clear existing table data
            $('#leftTable tbody, #rightTable tbody, #fullTable tbody').empty();

            // Cache key for this query
            const cacheKey = `page_${page}_search_${search}`;


            // Check if we have cached data
            if (dataCache[cacheKey]) {
                processData(dataCache[cacheKey]);
                return;
            }

            $.ajax({
                url: "/Dashboard/GetPagedData",
                type: "GET",
                data: { page, search },
                success: function(res) {
                    // Cache the response
                    dataCache[cacheKey] = res;
                    processData(res);
                },
                error: function(err) {
                    console.error("Error fetching data:", err);
                    alert("Une erreur est survenue lors de la récupération des données.");
                    $('#loadingSpinner').hide();
                }
            });
        }

                
        // Replace only the problematic DOM injection parts
        function processData(res) {
            currentPage = res.currentPage;
            totalPages = Math.ceil(res.totalItems / res.pageSize);
            const data = res.data;

            allData = data; // Store data for export
            updateStats(res); // Update summary statistics

            data.forEach((item, index) => {
                $('#leftTable tbody').append(`
                    <tr data-row="${index}">
                        <td>${formatValue(item.journee)}</td>
                        <td>${formatValue(item.pceId)}</td>
                        <td>${formatValue(item.coilId)}</td>
                        <td>${formatValue(item.nmic)}</td>
                    </tr>
                `);

                $('#rightTable tbody').append(`
                    <tr data-row="${index}">
                        <td>${formatDateTime(item.startTime)}</td>
                        <td>${formatDateTime(item.endTime)}</td>
                        <td>${formatValue(item.nombrePass)}</td>
                        <td>${formatStatus(item.cobble)}</td>
                        <td>${formatValue(item.restart)}</td>
                        <td>${formatValue(item.nature)}</td>
                    </tr>
                `);

                $('#fullTable tbody').append(`
                    <tr data-row="${index}">
                        <td>${formatValue(item.grade)}</td>
                        <td>${formatValue(item.fournisseur_brame)}</td>
                        <td>${formatValue(item.client)}</td>
                        <td>${formatWeight(item.poids_slab_balance_Four)}</td>
                        <td>${formatWeight(item.poids_Bobine)}</td>
                        <td>${formatPercentage(item.tx_chutes_brute)}</td>
                        <td>${formatPercentage(item.tx_chutes_fin)}</td>
                        <td>${formatPercentage(item.tx_chutes_echantillon)}</td>
                    </tr>
                `);
            });

            
        }

        // Format values properly for display
        function formatValue(value) {
            return value != null && value !== '' ? value : '-';
        }

        function formatDateTime(dateTime) {
            if (!dateTime) return '-';
            try {
                // Try to parse the date (handles both date strings and JS Date objects)
                const date = new Date(dateTime);
                return date.toLocaleString('fr-FR', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (e) {
                return dateTime;
            }
        }

        function formatWeight(weight) {
            if (weight == null) return '-';
            return parseFloat(weight).toLocaleString('fr-FR', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }) + ' t';
        }

        function formatPercentage(value) {
            if (value == null) return '-';
            return parseFloat(value).toLocaleString('fr-FR', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }) + ' %';
        }

        function formatStatus(status) {
            if (status == null) return '-';
            const val = String(status).toLowerCase();

            if (val === 'true' || val === '1' || val === 'oui') {
                return '<span class="status-indicator status-error"></span> Oui';
            } else if (val === 'false' || val === '0' || val === 'non') {
                return '<span class="status-indicator status-ok"></span> Non';
            }

            return status;
        }

        // Update summary statistics
        function updateStats(res) {
            // These values could be calculated from your actual data
            // For now, I've used your sample values from the image

            // If you want to calculate from actual data:
            if (res.data && res.data.length > 0) {
                // Calculate average weight if available
                let totalWeight = 0;
                let weightCount = 0;
                res.data.forEach(item => {
                    if (item.poids_Bobine) {
                        totalWeight += parseFloat(item.poids_Bobine);
                        weightCount++;
                    }
                });
                const avgWeight = weightCount > 0 ? totalWeight / weightCount : 0;
                $('#avgWeight').text(avgWeight.toLocaleString('fr-FR', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }) + ' t');

                // Calculate average passes
                let totalPasses = 0;
                let passCount = 0;
                res.data.forEach(item => {
                    if (item.nombrePass) {
                        totalPasses += parseInt(item.nombrePass);
                        passCount++;
                    }
                });
                const avgPasses = passCount > 0 ? totalPasses / passCount : 0;
                $('#avgPasses').text(avgPasses.toLocaleString('fr-FR', {
                    minimumFractionDigits: 1,
                    maximumFractionDigits: 1
                }));

                // Calculate error rate (based on cobble)
                let errorCount = 0;
                res.data.forEach(item => {
                    const val = String(item.cobble).toLowerCase();
                    if (val === 'true' || val === '1' || val === 'oui') {
                        errorCount++;
                    }
                });
                const errorRate = res.data.length > 0 ? (errorCount / res.data.length) * 100 : 0;
                $('#errorRate').text(errorRate.toLocaleString('fr-FR', {
                    minimumFractionDigits: 1,
                    maximumFractionDigits: 1
                }) + '%');

                // Update total coils
                $('#totalCoils').text(res.totalItems.toLocaleString('fr-FR'));
            }
        }

        // Build pagination controls dynamically
                function generatePagination(current, total) {
            const $pagination = $('#paginationContainer');
            $pagination.empty();

            if (total <= 1) return;

            // Previous
            if (current > 1) {
                $pagination.append(`
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${current - 1}" aria-label="Précédent">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                `);
            } else {
                $pagination.append(`
                    <li class="page-item disabled">
                        <a class="page-link" href="#" aria-label="Précédent">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                `);
            }

            let start = Math.max(1, current - 2);
            let end = Math.min(total, start + 4);
            if (end === total) start = Math.max(1, end - 4);

            if (start > 1) {
                $pagination.append(`<li class="page-item"><a class="page-link" href="#" data-page="1">1</a></li>`);
                if (start > 2) {
                    $pagination.append(`<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`);
                }
            }

            for (let i = start; i <= end; i++) {
                $pagination.append(`
                    <li class="page-item ${i === current ? "active" : ""}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `);
            }

            if (end < total) {
                if (end < total - 1) {
                    $pagination.append(`<li class="page-item disabled"><a class="page-link" href="#">...</a></li>`);
                }
                $pagination.append(`<li class="page-item"><a class="page-link" href="#" data-page="${total}">${total}</a></li>`);
            }

            // Next
            if (current < total) {
                $pagination.append(`
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${current + 1}" aria-label="Suivant">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                `);
            } else {
                $pagination.append(`
                    <li class="page-item disabled">
                        <a class="page-link" href="#" aria-label="Suivant">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                `);
            }
        }


        // Highlight same row across all tables when one is clicked
                function bindRowHighlighting() {
            $('table tbody tr').on('click', function () {
                const index = $(this).data('row');
                $('table tbody tr').removeClass('table-info');
                $(`table tbody tr[data-row="${index}"]`).addClass('table-info');
            });
        }


        // Handle pagination click event
        $(document).on('click', '.page-link', function (e) {
            e.preventDefault();
            const page = $(this).data('page');
            if (page) {
                $('html, body').animate({ scrollTop: 0 }, 'fast');
                loadData(page, searchQuery);
            }
        });

        // Handle search input with debounce
        let searchTimeout;
        $('#dashboardSearch').on('input', function () {
            clearTimeout(searchTimeout);
            const value = $(this).val().trim();

            searchTimeout = setTimeout(function() {
                if (value !== searchQuery) {
                    searchQuery = value;
                    loadData(1, searchQuery);
                }
            }, 500);
        });

        // Export to Excel functionality
        $('#exportToExcel').on('click', function() {
            // Show loading spinner
            $('#loadingSpinner').show();

            // If we're showing filtered results, use that for export
            const dataToExport = searchQuery ? { search: searchQuery } : {};

            $.ajax({
                url: "/Dashboard/ExportToExcel",
                type: "GET",
                data: dataToExport,
                xhrFields: {
                    responseType: 'blob' // Important for file download
                },
                success: function(blob) {
                    // Create a temporary link element
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;

                    // Generate filename with current date
                    const date = new Date();
                    const dateStr = date.toISOString().split('T')[0];
                    a.download = `Maghreb_Steel_Export_${dateStr}.xlsx`;


                    // Append to body, trigger click and cleanup
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);

                    // Hide loading spinner
                    $('#loadingSpinner').hide();
                },
                error: function(err) {
                    console.error("Error exporting to Excel:", err);
                    alert("Une erreur est survenue lors de l'exportation vers Excel.");
                    $('#loadingSpinner').hide();
                }
            });
        });

        // Initial load on page ready
        $(document).ready(function () {
            // Try to load Bootstrap Icons if not already loaded
            if (!document.getElementById('bootstrap-icons-css')) {
                $('head').append('<link id="bootstrap-icons-css" rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">');
            }

            loadData();

            // Refresh data every 5 minutes
            setInterval(function() {
                loadData(currentPage, searchQuery);
            }, 300000); // 5 minutes in milliseconds
        });
        console.log("✅ Dashboard Scripts Loaded");

    </script>
}